{"ast":null,"code":"import { CREATETASK, GETUSERS, LOGIN, LOGOUT, SETEMAIL, SETNAME, SETNAMEOFPROJECT, SETNAMETASK, SETPASSWORD, SETPROJECT, SETPROJECTFORTASK, SETTEXTTASK, SETTIMETASK, SETPROJECTTIME, READTASK, SETUSERTASK, SETTASKFORTRACKING, SETIDPRO } from \"./redux-types\";\nimport { combineReducers } from \"redux\";\nconst init = {\n  isAuth: false\n};\n\nfunction enterReducer(state = init, action) {\n  switch (action.type) {\n    case LOGIN:\n      {\n        return { ...state,\n          isAuth: action.payload\n        };\n      }\n\n    case LOGOUT:\n      {\n        const user = action.playload;\n        return [...state, user];\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst init_auth = {\n  email: '',\n  name: '',\n  password: ''\n};\n\nfunction Auth(state = init_auth, action) {\n  switch (action.type) {\n    case SETEMAIL:\n      {\n        return { ...state,\n          email: action.payload\n        };\n      }\n\n    case SETNAME:\n      {\n        return { ...state,\n          name: action.payload\n        };\n      }\n\n    case SETPASSWORD:\n      {\n        return { ...state,\n          password: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\n_c = Auth;\nconst init_name_of_project = {\n  name_of_project: '',\n  list_of_projects: [],\n  time_of_project: 0\n};\n\nfunction setProject(state = init_name_of_project, action) {\n  switch (action.type) {\n    case SETNAMEOFPROJECT:\n      {\n        return { ...state,\n          name_of_project: action.payload\n        };\n      }\n\n    case SETPROJECT:\n      {\n        return { ...state,\n          list_of_projects: action.payload\n        };\n      }\n\n    case SETPROJECTTIME:\n      {\n        return { ...state,\n          time_of_project: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst init_task = {\n  nameTask: '',\n  timeTask: '',\n  textTask: '',\n  nameProject: '',\n  allUsers: [],\n  selectedProject: '',\n  readedTask: [],\n  selectedUser: '',\n  taskfortracking: '',\n  idforproj: ''\n};\n\nfunction setTask(state = init_task, action) {\n  switch (action.type) {\n    case SETNAMETASK:\n      {\n        return { ...state,\n          nameTask: action.payload\n        };\n      }\n\n    case SETTIMETASK:\n      {\n        return { ...state,\n          timeTask: action.payload\n        };\n      }\n\n    case SETTEXTTASK:\n      {\n        return { ...state,\n          textTask: action.payload\n        };\n      }\n\n    case GETUSERS:\n      {\n        return { ...state,\n          allUsers: action.payload\n        };\n      }\n\n    case SETPROJECTFORTASK:\n      {\n        return { ...state,\n          selectedProject: action.payload\n        };\n      }\n\n    case READTASK:\n      {\n        return { ...state,\n          readedTask: action.payload\n        };\n      }\n\n    case SETUSERTASK:\n      {\n        return { ...state,\n          selectedUser: action.payload\n        };\n      }\n\n    case SETTASKFORTRACKING:\n      {\n        return { ...state,\n          taskfortracking: action.payload\n        };\n      }\n\n    case SETIDPRO:\n      {\n        return { ...state,\n          idforproj: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  success: false,\n  created: false,\n  loading: false,\n  error: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'start_req':\n      return {\n        success: false,\n        loading: true\n      };\n\n    case 'req_success':\n      return {\n        success: true\n      };\n\n    case 'err_req':\n      return {\n        loading: false,\n        error: true\n      };\n\n    case 'success_create':\n      return {\n        created: true\n      };\n\n    case 'err_create':\n      return {\n        created: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  enter: enterReducer,\n  setAuth: Auth,\n  setProject: setProject,\n  reducer: reducer,\n  setTask: setTask,\n  set\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/home/developer/Documents/last_commits/Project_Management/Tracker_Front/src/Utils/redux/rootReducer.js"],"names":["CREATETASK","GETUSERS","LOGIN","LOGOUT","SETEMAIL","SETNAME","SETNAMEOFPROJECT","SETNAMETASK","SETPASSWORD","SETPROJECT","SETPROJECTFORTASK","SETTEXTTASK","SETTIMETASK","SETPROJECTTIME","READTASK","SETUSERTASK","SETTASKFORTRACKING","SETIDPRO","combineReducers","init","isAuth","enterReducer","state","action","type","payload","user","playload","init_auth","email","name","password","Auth","init_name_of_project","name_of_project","list_of_projects","time_of_project","setProject","init_task","nameTask","timeTask","textTask","nameProject","allUsers","selectedProject","readedTask","selectedUser","taskfortracking","idforproj","setTask","initialState","success","created","loading","error","reducer","rootReducer","enter","setAuth","set"],"mappings":"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","sourcesContent":["import { CREATETASK, GETUSERS, LOGIN, LOGOUT, SETEMAIL, SETNAME, SETNAMEOFPROJECT, SETNAMETASK, SETPASSWORD, SETPROJECT, SETPROJECTFORTASK, SETTEXTTASK, SETTIMETASK, SETPROJECTTIME, READTASK, SETUSERTASK, SETTASKFORTRACKING, SETIDPRO  } from \"./redux-types\";\nimport { combineReducers } from \"redux\"\n\nconst init = {\n  isAuth: false\n}\nfunction enterReducer(state = init, action){\n  switch (action.type) {\n    case LOGIN:{     \n      return {...state, isAuth: action.payload}\n    }\n    case LOGOUT:{\n      const user = action.playload\n      return[...state, user]\n    }  \n    default:return state \n  }\n}\n\nconst init_auth ={\n  email: '',\n  name: '',\n  password: ''\n}\nfunction Auth(state = init_auth, action){\n  switch(action.type){\n    case SETEMAIL:{\n      return {...state, email: action.payload}\n    }\n   case SETNAME: {\n      return {...state, name: action.payload}\n  }\n  case SETPASSWORD: {\n    return {...state, password: action.payload}\n  }\n  default: return state \n  }\n}\n\n\nconst init_name_of_project = {\n  name_of_project: '',\n  list_of_projects: [],\n  time_of_project: 0\n}\nfunction setProject( state = init_name_of_project, action){\n  switch(action.type){\n    case SETNAMEOFPROJECT: {\n      return {...state, name_of_project: action.payload}\n    }\n    case SETPROJECT: {\n      return {...state, list_of_projects: action.payload}\n    }\n    case SETPROJECTTIME:{\n      return {...state, time_of_project: action.payload}\n    }\n\n    default: return state\n  }\n}\n\nconst init_task = {\n  nameTask: '',\n  timeTask: '',\n  textTask: '',\n  nameProject: '',\n  allUsers: [],\n  selectedProject: '',\n  readedTask: [],\n  selectedUser: '',\n  taskfortracking: '',\n  idforproj: '',\n  \n}\nfunction setTask(state = init_task, action){\n  switch(action.type){\n    case SETNAMETASK:{\n      return {...state, nameTask: action.payload}\n    }\n    case SETTIMETASK: {\n      return {...state, timeTask: action.payload}\n    }\n    case SETTEXTTASK:{\n      return {...state, textTask: action.payload}\n    }\n    case GETUSERS:{\n      return{...state, allUsers: action.payload}\n    }\n    case SETPROJECTFORTASK:{\n      return{...state, selectedProject: action.payload}\n    }\n    case READTASK:{\n      return {...state, readedTask: action.payload}\n    }\n    case SETUSERTASK: {\n      return {...state, selectedUser: action.payload}\n    }\n    case SETTASKFORTRACKING: {\n      return {...state, taskfortracking: action.payload}\n    }\n    case SETIDPRO: {\n      return {...state, idforproj: action.payload}\n    }\n    \n    default: return state\n  }\n}\n\n\nconst initialState = {\n  success: false,\n  created: false,\n  loading: false,\n  error: false,\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'start_req':\n      return {\n        success: false,\n        loading: true,\n      };\n    case 'req_success':\n      return {\n        success: true,\n      };\n    case 'err_req':\n      return {\n        loading: false,\n        error: true,\n      };\n      \n    case 'success_create':\n      return {\n        created: true\n      };\n    case 'err_create':\n      return {\n        created: false\n      };\n        \n    default:\n      return state;\n  }\n};\n\n  \n\n\nexport const rootReducer = combineReducers({\n  enter: enterReducer,\n  setAuth: Auth,\n  setProject: setProject,\n  reducer: reducer,\n  setTask: setTask,\n  set\n  \n})"]},"metadata":{},"sourceType":"module"}